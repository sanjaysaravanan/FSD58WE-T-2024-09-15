
Topics:

  We have completed the simple Registration Flow of storing User Details, Now futher,

  0. MiddleWares:

    Middlewares are used a simple function to executed before executing the route logic tied up with a path

    Custom MiddleWares:
      (req, res, next) => {
        // statements to be executed before route logic
      }

    Generic Middlewares:
      Logging


  Authentication:

    0. Sending Mail to the user Email right after registeration
      Requirements:
        1. Google Account
        2. Nodemailer npm package 

    1. JWT - JSON Web Token
      package which is used to sign a json object or string into a encrypted long string which is only understood by JWT package itself

    2. Create a service which can trigger a welcome & Verify Account email to verify the account

      Verify Account Email should contain link to verifying the account
        <FE-URL>/verify-account?token=<jwt-token>

      BE:
        users/verify-account?token=<jwt-token> - 
          1. API which takes a Token
          2. Veirfy the token 
          3. if token is valid, set isVerified as true
          4. else return proper response to the user saying the link expired

      FE:
        <FE-URL>/verify-account?token=<jwt-token>
        Page takes a token and request the api <BE-URL>/verify-account?token=<jwt-token>

          Render the UI according the response from the backend

    3. Login:
    
      BE:
        users/login - API to verify the password & return valid response to the front-end

      FE:
        /login - Page to take the email & password send a request to /login api in backend.
        Render the UI according to the response.

        Success - Show the Home Page with Posts
          / - Page to Display all the Posts in the DB
        Failed - Simple alert to indicate the failure
  
Task Ideas:
  Password Reset Flow: ( Create User Login/Register )
    1. Forgot Password Page
        1. Should have a input to take email
        2. Trigger an API POST call /forgot-password with email ( query param / body )
        3. Success -> UI should say Email for reseting sent successfully
        4. Failure -> Please check the email and try again
    
    2. BE API /forgot-password

        1. Get email using query param / body
        2. Check if the user exists
            Generate Random String store in DB and use in email
            Yes, send an email <FE-URL>/reset-password?token=<randon-string>
              Response with { msg: 'Password Reset Email Sent successfully', code: 1 }
            No, send a response status 404 ( user not found ), code: -1
    
    3. Reset Password Page:
        1. /reset-password?token=<random-string>
        2. take the random string pass it to backend  API /check-random-string ( pass the received )
            Check the random string exists in DB
            Yes, 200 response which open up the reset password form
            No, Link expired or something went wrong
    
    4. BE API /reset-password ( Body: random string, new password) 
        body: random string, new password
        backend hash the password and store it with the proper random string
        clear the random string

  URL Shortener:

    Login: Refer the node-project & node-fe
    Register: Refer the node-project & node-fe

    Step 1:
      UI should a have a form for entering the long url

        1. Enter URL and click submit
        2. Trigger an api to the backend /url-shortner
            pass (longUrl in the body or params)
        
    Step 2:
      backend will receive the longUrl 
      longUrl should be mapped with a short url ( <FE-URL>/<url-id> )

      DB should contain:
        longUrl
        urlId
        shortUrl: <FE-URL>/<url-id>
      
      send the response back like below
        {
          msg: "Url shortened successfully",
          shortUrl: <FE-URL>/<url-id>
        }
    
    Step 3:
      Says somebody visits the shorturl,

        <fe-url>/<url-id>

        get the url-id using useParams
        trigger an api call to get the long-url
        {
          long-url: actual-long-url
        } 
        redirect to the long-url from our Front-End
        location.replace(longUrl); will redirect to the long-url


Task:
  Complete Both the Task with above ideas
  Day 37: https://docs.google.com/document/d/1I7zwdMN77E3JwSXtgp2pVKgcAqPBHOwczishsKak-Qk/edit

  Day 38: https://docs.google.com/document/d/1nD7fzgzw5UmFSpnHK2FWVadnp4y7EaND26_AqkZzSTw/edit


Next Session:
  Authorization:

    Further all the other APIs like Posts should be authorized with the JWT token in the Header

    Authorization Middleware to authorize an api